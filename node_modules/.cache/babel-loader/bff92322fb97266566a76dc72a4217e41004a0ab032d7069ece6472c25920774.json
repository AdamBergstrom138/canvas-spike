{"ast":null,"code":"import { useEffect, useRef } from \"react\";\nexport function useOnDraw(onDraw) {\n  /*\n  const canvasRef = useRef(null);\n  const isDrawingRef = useRef(false);\n   const mouseMoveListenerRef = useRef(null);\n  const mouseDownListenerRef = useRef(null);\n  const mouseUpListenerRef = useRef(null);\n   const prevPointRef = useRef(null);\n   useEffect(() => {\n      return () => {\n          if(mouseMoveListenerRef.current){\n              window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current)\n          }\n          if(mouseUpListenerRef.current){\n              window.removeEventListener(\"mouseup\", mouseUpListenerRef.current)\n          }\n      }\n  }, []);\n   function setCanvasRef(ref) {\n      if(!ref) return;\n      if(canvasRef.current){\n          canvasRef.current.removeEventListener(\"mousedown\", mouseDownListenerRef.current);\n      }\n      canvasRef.current = ref;\n      initmouseMoveListener();\n      initMouseDownListener();\n      initMouseUpListener();\n  }\n   function initmouseMoveListener(){\n      const mouseMoveListener = (e) => {\n          if(isDrawingRef.current){\n              // console.log({ x : e.clientX, y : e.clientY});\n              const point = computePointInCanvas(e.clientX, e.clientY);\n              const ctx = canvasRef.current.getContext('2d');\n              if(onDraw) onDraw(ctx, point, prevPointRef.current);\n              prevPointRef.current = point;\n              console.log(point);\n          }\n      }\n      mouseMoveListenerRef.current = mouseMoveListener;\n      window.addEventListener(\"mousemove\", mouseMoveListener);\n  }\n   function initMouseUpListener() {\n      const listener = () => {\n          isDrawingRef.current = false;\n          prevPointRef.current = null;\n      }\n      mouseUpListenerRef.current = listener;\n      window.addEventListener(\"mouseup\", listener)\n  }\n   function initMouseDownListener(){\n      if(!canvasRef.current) return;\n      const listener = () => {\n          isDrawingRef.current = true;\n       }\n      mouseDownListenerRef.current = listener;\n      canvasRef.current.addEventListener(\"mousedown\", listener);\n  }\n   function computePointInCanvas(clientX, clientY) {\n      if(canvasRef.current){\n       const boundingRect = canvasRef.current.getBoundingClientRect();\n      return{\n          x : clientX - boundingRect.left ,\n          y : clientY - boundingRect.top\n      }\n  } else {\n      return null;\n  }\n  }\n   return setCanvasRef; */\n}","map":{"version":3,"names":["useEffect","useRef","useOnDraw","onDraw"],"sources":["/Users/adambergstrom/Documents/Prime FS Engineering/Prime Tier 2/Week 8/canvas-drawing/canvas-drawing/src/Components/Hooks.js"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport function useOnDraw(onDraw) { \n    /*\n    const canvasRef = useRef(null);\n    const isDrawingRef = useRef(false);\n\n    const mouseMoveListenerRef = useRef(null);\n    const mouseDownListenerRef = useRef(null);\n    const mouseUpListenerRef = useRef(null);\n\n    const prevPointRef = useRef(null);\n\n    useEffect(() => {\n        return () => {\n            if(mouseMoveListenerRef.current){\n                window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current)\n            }\n            if(mouseUpListenerRef.current){\n                window.removeEventListener(\"mouseup\", mouseUpListenerRef.current)\n            }\n        }\n    }, []);\n\n    function setCanvasRef(ref) {\n        if(!ref) return;\n        if(canvasRef.current){\n            canvasRef.current.removeEventListener(\"mousedown\", mouseDownListenerRef.current);\n        }\n        canvasRef.current = ref;\n        initmouseMoveListener();\n        initMouseDownListener();\n        initMouseUpListener();\n    }\n\n    function initmouseMoveListener(){\n        const mouseMoveListener = (e) => {\n            if(isDrawingRef.current){\n                // console.log({ x : e.clientX, y : e.clientY});\n                const point = computePointInCanvas(e.clientX, e.clientY);\n                const ctx = canvasRef.current.getContext('2d');\n                if(onDraw) onDraw(ctx, point, prevPointRef.current);\n                prevPointRef.current = point;\n                console.log(point);\n            }\n        }\n        mouseMoveListenerRef.current = mouseMoveListener;\n        window.addEventListener(\"mousemove\", mouseMoveListener);\n    }\n\n    function initMouseUpListener() {\n        const listener = () => {\n            isDrawingRef.current = false;\n            prevPointRef.current = null;\n        }\n        mouseUpListenerRef.current = listener;\n        window.addEventListener(\"mouseup\", listener)\n    }\n\n    function initMouseDownListener(){\n        if(!canvasRef.current) return;\n        const listener = () => {\n            isDrawingRef.current = true;\n\n        }\n        mouseDownListenerRef.current = listener;\n        canvasRef.current.addEventListener(\"mousedown\", listener);\n    }\n\n    function computePointInCanvas(clientX, clientY) {\n        if(canvasRef.current){\n\n        const boundingRect = canvasRef.current.getBoundingClientRect();\n        return{\n            x : clientX - boundingRect.left ,\n            y : clientY - boundingRect.top\n        }\n    } else {\n        return null;\n    }\n    }\n\n    return setCanvasRef; */\n\n}"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,OAAO,SAASC,SAAS,CAACC,MAAM,EAAE;EAC9B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApEI"},"metadata":{},"sourceType":"module","externalDependencies":[]}