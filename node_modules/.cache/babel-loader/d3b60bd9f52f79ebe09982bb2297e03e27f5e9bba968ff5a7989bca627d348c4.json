{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nexport function useOnDraw(onDraw) {\n  _s();\n  const canvasRef = useRef(null);\n  const isDrawingRef = useRef(false);\n  const prevPointRef = useRef(null);\n  const mouseMoveListenerRef = useRef(null);\n  const mouseUpListenerRef = useRef(null);\n  function setCanvasRef(ref) {\n    canvasRef.current = ref;\n  }\n  function onCanvasMouseDown() {\n    isDrawingRef.current = true;\n  }\n  useEffect(() => {\n    function computePointInCanvas(clientX, clientY) {\n      if (canvasRef.current) {\n        console.log('test1');\n        const boundingRect = canvasRef.current.getBoundingClientRect();\n        return {\n          x: clientX - boundingRect.left,\n          y: clientY - boundingRect.top\n        };\n      } else {\n        return null;\n      }\n    }\n    function initmouseMoveListener() {\n      const mouseMoveListener = e => {\n        if (isDrawingRef.current && canvasRef.current) {\n          console.log('test');\n          console.log({\n            x: e.clientX,\n            y: e.clientY\n          });\n          const point = computePointInCanvas(e.clientX, e.clientY);\n          const ctx = canvasRef.current.getContext('2d');\n          if (onDraw) onDraw(ctx, point, prevPointRef.current);\n          prevPointRef.current = point;\n          console.log(point);\n        }\n      };\n      mouseMoveListenerRef.current = mouseMoveListener;\n      window.addEventListener(\"mousemove\", mouseMoveListener);\n    }\n    function initMouseUpListener() {\n      const listener = () => {\n        isDrawingRef.current = false;\n        prevPointRef.current = null;\n      };\n      mouseUpListenerRef.current = listener;\n      window.addEventListener(\"mouseup\", listener);\n    }\n    function removeListeners() {\n      if (mouseMoveListenerRef.current) {\n        window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current);\n      }\n      if (mouseUpListenerRef.current) {\n        window.removeEventListener(\"mouseup\", mouseUpListenerRef.current);\n      }\n    }\n    initmouseMoveListener();\n    initMouseUpListener();\n    return () => {\n      //TODO: clean up!!\n      removeListeners();\n    };\n  }, [onDraw]);\n  return setCanvasRef, onCanvasMouseDown;\n\n  /*\n  const canvasRef = useRef(null);\n  const isDrawingRef = useRef(false);\n   const mouseMoveListenerRef = useRef(null);\n  const mouseDownListenerRef = useRef(null);\n  const mouseUpListenerRef = useRef(null);\n   const prevPointRef = useRef(null);\n   useEffect(() => {\n      return () => {\n          if(mouseMoveListenerRef.current){\n              window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current)\n          }\n          if(mouseUpListenerRef.current){\n              window.removeEventListener(\"mouseup\", mouseUpListenerRef.current)\n          }\n      }\n  }, []);\n   function setCanvasRef(ref) {\n      if(!ref) return;\n      if(canvasRef.current){\n          canvasRef.current.removeEventListener(\"mousedown\", mouseDownListenerRef.current);\n      }\n      canvasRef.current = ref;\n      initmouseMoveListener();\n      initMouseDownListener();\n      initMouseUpListener();\n  }\n   function initmouseMoveListener(){\n      const mouseMoveListener = (e) => {\n          if(isDrawingRef.current){\n              // console.log({ x : e.clientX, y : e.clientY});\n              const point = computePointInCanvas(e.clientX, e.clientY);\n              const ctx = canvasRef.current.getContext('2d');\n              if(onDraw) onDraw(ctx, point, prevPointRef.current);\n              prevPointRef.current = point;\n              console.log(point);\n          }\n      }\n      mouseMoveListenerRef.current = mouseMoveListener;\n      window.addEventListener(\"mousemove\", mouseMoveListener);\n  }\n   function initMouseUpListener() {\n      const listener = () => {\n          isDrawingRef.current = false;\n          prevPointRef.current = null;\n      }\n      mouseUpListenerRef.current = listener;\n      window.addEventListener(\"mouseup\", listener)\n  }\n   function initMouseDownListener(){\n      if(!canvasRef.current) return;\n      const listener = () => {\n          isDrawingRef.current = true;\n       }\n      mouseDownListenerRef.current = listener;\n      canvasRef.current.addEventListener(\"mousedown\", listener);\n  }\n   function computePointInCanvas(clientX, clientY) {\n      if(canvasRef.current){\n       const boundingRect = canvasRef.current.getBoundingClientRect();\n      return{\n          x : clientX - boundingRect.left ,\n          y : clientY - boundingRect.top\n      }\n  } else {\n      return null;\n  }\n  }\n   return setCanvasRef; */\n}\n_s(useOnDraw, \"yzQlUgpjSmNqxYCWmikAILNmSuw=\");","map":{"version":3,"names":["useEffect","useRef","useOnDraw","onDraw","canvasRef","isDrawingRef","prevPointRef","mouseMoveListenerRef","mouseUpListenerRef","setCanvasRef","ref","current","onCanvasMouseDown","computePointInCanvas","clientX","clientY","console","log","boundingRect","getBoundingClientRect","x","left","y","top","initmouseMoveListener","mouseMoveListener","e","point","ctx","getContext","window","addEventListener","initMouseUpListener","listener","removeListeners","removeEventListener"],"sources":["/Users/adambergstrom/Documents/Prime FS Engineering/Prime Tier 2/Week 8/canvas-drawing/canvas-drawing/src/Components/Hooks.js"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport function useOnDraw(onDraw) { \n\n    const canvasRef = useRef(null);\n    const isDrawingRef = useRef(false);\n    const prevPointRef = useRef(null);\n\n    const mouseMoveListenerRef = useRef(null);\n    const mouseUpListenerRef = useRef(null);\n\n    function setCanvasRef(ref) {\n        canvasRef.current = ref;\n    }\n    function onCanvasMouseDown(){\n        isDrawingRef.current = true;\n    }\n\n    useEffect(() =>{\n\n        function computePointInCanvas(clientX, clientY) {\n            if(canvasRef.current){\n                console.log('test1');\n            const boundingRect = canvasRef.current.getBoundingClientRect();\n            return{\n                x: clientX - boundingRect.left ,\n                y: clientY - boundingRect.top\n            }\n        } else {\n            return null;\n        }\n        }\n\n        function initmouseMoveListener(){\n            const mouseMoveListener = (e) => {\n                if(isDrawingRef.current && canvasRef.current){\n                    console.log('test');\n                    console.log({ x : e.clientX, y : e.clientY});\n                    const point = computePointInCanvas(e.clientX, e.clientY);\n                    const ctx = canvasRef.current.getContext('2d');\n                    if(onDraw) onDraw(ctx, point, prevPointRef.current);\n                    prevPointRef.current = point;\n                    console.log(point);\n                }\n            }\n            mouseMoveListenerRef.current = mouseMoveListener;\n            window.addEventListener(\"mousemove\", mouseMoveListener);\n        }\n    \n        function initMouseUpListener() {\n            const listener = () => {\n                isDrawingRef.current = false;\n                prevPointRef.current = null;\n            }\n            mouseUpListenerRef.current = listener;\n            window.addEventListener(\"mouseup\", listener)\n        }\n\n        function removeListeners() {\n            if(mouseMoveListenerRef.current){\n                window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current)\n            }\n            if(mouseUpListenerRef.current){\n                window.removeEventListener(\"mouseup\", mouseUpListenerRef.current)\n            }\n        }\n        initmouseMoveListener();\n        initMouseUpListener();\n        return () => {\n            //TODO: clean up!!\n            removeListeners();\n        }\n    },[onDraw]);\n\n    return(\n        setCanvasRef,\n        onCanvasMouseDown\n    )\n\n    /*\n    const canvasRef = useRef(null);\n    const isDrawingRef = useRef(false);\n\n    const mouseMoveListenerRef = useRef(null);\n    const mouseDownListenerRef = useRef(null);\n    const mouseUpListenerRef = useRef(null);\n\n    const prevPointRef = useRef(null);\n\n    useEffect(() => {\n        return () => {\n            if(mouseMoveListenerRef.current){\n                window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current)\n            }\n            if(mouseUpListenerRef.current){\n                window.removeEventListener(\"mouseup\", mouseUpListenerRef.current)\n            }\n        }\n    }, []);\n\n    function setCanvasRef(ref) {\n        if(!ref) return;\n        if(canvasRef.current){\n            canvasRef.current.removeEventListener(\"mousedown\", mouseDownListenerRef.current);\n        }\n        canvasRef.current = ref;\n        initmouseMoveListener();\n        initMouseDownListener();\n        initMouseUpListener();\n    }\n\n    function initmouseMoveListener(){\n        const mouseMoveListener = (e) => {\n            if(isDrawingRef.current){\n                // console.log({ x : e.clientX, y : e.clientY});\n                const point = computePointInCanvas(e.clientX, e.clientY);\n                const ctx = canvasRef.current.getContext('2d');\n                if(onDraw) onDraw(ctx, point, prevPointRef.current);\n                prevPointRef.current = point;\n                console.log(point);\n            }\n        }\n        mouseMoveListenerRef.current = mouseMoveListener;\n        window.addEventListener(\"mousemove\", mouseMoveListener);\n    }\n\n    function initMouseUpListener() {\n        const listener = () => {\n            isDrawingRef.current = false;\n            prevPointRef.current = null;\n        }\n        mouseUpListenerRef.current = listener;\n        window.addEventListener(\"mouseup\", listener)\n    }\n\n    function initMouseDownListener(){\n        if(!canvasRef.current) return;\n        const listener = () => {\n            isDrawingRef.current = true;\n\n        }\n        mouseDownListenerRef.current = listener;\n        canvasRef.current.addEventListener(\"mousedown\", listener);\n    }\n\n    function computePointInCanvas(clientX, clientY) {\n        if(canvasRef.current){\n\n        const boundingRect = canvasRef.current.getBoundingClientRect();\n        return{\n            x : clientX - boundingRect.left ,\n            y : clientY - boundingRect.top\n        }\n    } else {\n        return null;\n    }\n    }\n\n    return setCanvasRef; */\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}