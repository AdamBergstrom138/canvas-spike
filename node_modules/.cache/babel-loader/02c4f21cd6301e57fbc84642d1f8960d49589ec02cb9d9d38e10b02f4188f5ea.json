{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nexport function useOnDraw(onDraw) {\n  _s();\n  const canvasRef = useRef(null);\n  const isDrawingRef = useRef(false);\n  const mouseMoveListenerRef = useRef(null);\n  // const mouseDownListenerRef = useRef(null);\n  const mouseUpListenerRef = useRef(null);\n  useEffect(() => {\n    function initmouseMoveListener() {\n      const mouseMoveListener = e => {\n        if (isDrawingRef.current) {\n          // console.log({ x : e.clientX, y : e.clientY});\n          const point = computePointInCanvas(e.clientX, e.clientY);\n          const ctx = canvasRef.current.getContext('2d');\n          if (onDraw) onDraw(ctx, point, prevPointRef.current);\n          prevPointRef.current = point;\n          console.log(point);\n        }\n      };\n      mouseMoveListenerRef.current = mouseMoveListener;\n      window.addEventListener(\"mousemove\", mouseMoveListener);\n    }\n    function initMouseUpListener() {\n      const listener = () => {\n        isDrawingRef.current = false;\n        prevPointRef.current = null;\n      };\n      mouseUpListenerRef.current = listener;\n      window.addEventListener(\"mouseup\", listener);\n    }\n    function computePointInCanvas(clientX, clientY) {\n      if (canvasRef.current) {\n        const boundingRect = canvasRef.current.getBoundingClientRect();\n        return {\n          x: clientX - boundingRect.left,\n          y: clientY - boundingRect.top\n        };\n      } else {\n        return null;\n      }\n    }\n    function removeListeners() {\n      if (mouseMoveListenerRef.current) {\n        window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current);\n      }\n      if (mouseUpListenerRef.current) {\n        window.removeEventListener(\"mouseup\", mouseUpListenerRef.current);\n      }\n    }\n    initmouseMoveListener();\n    initMouseUpListener();\n    return () => {\n      //TODO: clean up!!\n      removeListeners();\n    };\n  }, [onDraw]);\n  function setCanvasRef(ref) {\n    canvasRef.current = ref;\n  }\n  function onMouseDown() {\n    isDrawingRef.current = true;\n  }\n  return setCanvasRef, onMouseDown;\n\n  /*\n  const canvasRef = useRef(null);\n  const isDrawingRef = useRef(false);\n   const mouseMoveListenerRef = useRef(null);\n  const mouseDownListenerRef = useRef(null);\n  const mouseUpListenerRef = useRef(null);\n   const prevPointRef = useRef(null);\n   useEffect(() => {\n      return () => {\n          if(mouseMoveListenerRef.current){\n              window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current)\n          }\n          if(mouseUpListenerRef.current){\n              window.removeEventListener(\"mouseup\", mouseUpListenerRef.current)\n          }\n      }\n  }, []);\n   function setCanvasRef(ref) {\n      if(!ref) return;\n      if(canvasRef.current){\n          canvasRef.current.removeEventListener(\"mousedown\", mouseDownListenerRef.current);\n      }\n      canvasRef.current = ref;\n      initmouseMoveListener();\n      initMouseDownListener();\n      initMouseUpListener();\n  }\n   function initmouseMoveListener(){\n      const mouseMoveListener = (e) => {\n          if(isDrawingRef.current){\n              // console.log({ x : e.clientX, y : e.clientY});\n              const point = computePointInCanvas(e.clientX, e.clientY);\n              const ctx = canvasRef.current.getContext('2d');\n              if(onDraw) onDraw(ctx, point, prevPointRef.current);\n              prevPointRef.current = point;\n              console.log(point);\n          }\n      }\n      mouseMoveListenerRef.current = mouseMoveListener;\n      window.addEventListener(\"mousemove\", mouseMoveListener);\n  }\n   function initMouseUpListener() {\n      const listener = () => {\n          isDrawingRef.current = false;\n          prevPointRef.current = null;\n      }\n      mouseUpListenerRef.current = listener;\n      window.addEventListener(\"mouseup\", listener)\n  }\n   function initMouseDownListener(){\n      if(!canvasRef.current) return;\n      const listener = () => {\n          isDrawingRef.current = true;\n       }\n      mouseDownListenerRef.current = listener;\n      canvasRef.current.addEventListener(\"mousedown\", listener);\n  }\n   function computePointInCanvas(clientX, clientY) {\n      if(canvasRef.current){\n       const boundingRect = canvasRef.current.getBoundingClientRect();\n      return{\n          x : clientX - boundingRect.left ,\n          y : clientY - boundingRect.top\n      }\n  } else {\n      return null;\n  }\n  }\n   return setCanvasRef; */\n}\n_s(useOnDraw, \"72JPj7AtQZlXdc5BHyj4sTjWIow=\");","map":{"version":3,"names":["useEffect","useRef","useOnDraw","onDraw","canvasRef","isDrawingRef","mouseMoveListenerRef","mouseUpListenerRef","initmouseMoveListener","mouseMoveListener","e","current","point","computePointInCanvas","clientX","clientY","ctx","getContext","prevPointRef","console","log","window","addEventListener","initMouseUpListener","listener","boundingRect","getBoundingClientRect","x","left","y","top","removeListeners","removeEventListener","setCanvasRef","ref","onMouseDown"],"sources":["/Users/adambergstrom/Documents/Prime FS Engineering/Prime Tier 2/Week 8/canvas-drawing/canvas-drawing/src/Components/Hooks.js"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport function useOnDraw(onDraw) { \n\n    const canvasRef = useRef(null);\n    const isDrawingRef = useRef(false);\n\n    const mouseMoveListenerRef = useRef(null);\n    // const mouseDownListenerRef = useRef(null);\n    const mouseUpListenerRef = useRef(null);\n\n    useEffect(() =>{\n\n        function initmouseMoveListener(){\n            const mouseMoveListener = (e) => {\n                if(isDrawingRef.current){\n                    // console.log({ x : e.clientX, y : e.clientY});\n                    const point = computePointInCanvas(e.clientX, e.clientY);\n                    const ctx = canvasRef.current.getContext('2d');\n                    if(onDraw) onDraw(ctx, point, prevPointRef.current);\n                    prevPointRef.current = point;\n                    console.log(point);\n                }\n            }\n            mouseMoveListenerRef.current = mouseMoveListener;\n            window.addEventListener(\"mousemove\", mouseMoveListener);\n        }\n    \n        function initMouseUpListener() {\n            const listener = () => {\n                isDrawingRef.current = false;\n                prevPointRef.current = null;\n            }\n            mouseUpListenerRef.current = listener;\n            window.addEventListener(\"mouseup\", listener)\n        }\n        function computePointInCanvas(clientX, clientY) {\n            if(canvasRef.current){\n    \n            const boundingRect = canvasRef.current.getBoundingClientRect();\n            return{\n                x : clientX - boundingRect.left ,\n                y : clientY - boundingRect.top\n            }\n        } else {\n            return null;\n        }\n        }\n        function removeListeners() {\n            if(mouseMoveListenerRef.current){\n                window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current)\n            }\n            if(mouseUpListenerRef.current){\n                window.removeEventListener(\"mouseup\", mouseUpListenerRef.current)\n            }\n        }\n        initmouseMoveListener();\n        initMouseUpListener();\n        return () => {\n            //TODO: clean up!!\n            removeListeners();\n        }\n    },[onDraw]);\n\n    function setCanvasRef(ref) {\n        canvasRef.current = ref;\n    }\n    function onMouseDown(){\n        isDrawingRef.current = true;\n    }\n    return(\n        setCanvasRef,\n        onMouseDown\n    )\n\n    /*\n    const canvasRef = useRef(null);\n    const isDrawingRef = useRef(false);\n\n    const mouseMoveListenerRef = useRef(null);\n    const mouseDownListenerRef = useRef(null);\n    const mouseUpListenerRef = useRef(null);\n\n    const prevPointRef = useRef(null);\n\n    useEffect(() => {\n        return () => {\n            if(mouseMoveListenerRef.current){\n                window.removeEventListener(\"mousemove\", mouseMoveListenerRef.current)\n            }\n            if(mouseUpListenerRef.current){\n                window.removeEventListener(\"mouseup\", mouseUpListenerRef.current)\n            }\n        }\n    }, []);\n\n    function setCanvasRef(ref) {\n        if(!ref) return;\n        if(canvasRef.current){\n            canvasRef.current.removeEventListener(\"mousedown\", mouseDownListenerRef.current);\n        }\n        canvasRef.current = ref;\n        initmouseMoveListener();\n        initMouseDownListener();\n        initMouseUpListener();\n    }\n\n    function initmouseMoveListener(){\n        const mouseMoveListener = (e) => {\n            if(isDrawingRef.current){\n                // console.log({ x : e.clientX, y : e.clientY});\n                const point = computePointInCanvas(e.clientX, e.clientY);\n                const ctx = canvasRef.current.getContext('2d');\n                if(onDraw) onDraw(ctx, point, prevPointRef.current);\n                prevPointRef.current = point;\n                console.log(point);\n            }\n        }\n        mouseMoveListenerRef.current = mouseMoveListener;\n        window.addEventListener(\"mousemove\", mouseMoveListener);\n    }\n\n    function initMouseUpListener() {\n        const listener = () => {\n            isDrawingRef.current = false;\n            prevPointRef.current = null;\n        }\n        mouseUpListenerRef.current = listener;\n        window.addEventListener(\"mouseup\", listener)\n    }\n\n    function initMouseDownListener(){\n        if(!canvasRef.current) return;\n        const listener = () => {\n            isDrawingRef.current = true;\n\n        }\n        mouseDownListenerRef.current = listener;\n        canvasRef.current.addEventListener(\"mousedown\", listener);\n    }\n\n    function computePointInCanvas(clientX, clientY) {\n        if(canvasRef.current){\n\n        const boundingRect = canvasRef.current.getBoundingClientRect();\n        return{\n            x : clientX - boundingRect.left ,\n            y : clientY - boundingRect.top\n        }\n    } else {\n        return null;\n    }\n    }\n\n    return setCanvasRef; */\n\n}"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEzC,OAAO,SAASC,SAAS,CAACC,MAAM,EAAE;EAAA;EAE9B,MAAMC,SAAS,GAAGH,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMI,YAAY,GAAGJ,MAAM,CAAC,KAAK,CAAC;EAElC,MAAMK,oBAAoB,GAAGL,MAAM,CAAC,IAAI,CAAC;EACzC;EACA,MAAMM,kBAAkB,GAAGN,MAAM,CAAC,IAAI,CAAC;EAEvCD,SAAS,CAAC,MAAK;IAEX,SAASQ,qBAAqB,GAAE;MAC5B,MAAMC,iBAAiB,GAAIC,CAAC,IAAK;QAC7B,IAAGL,YAAY,CAACM,OAAO,EAAC;UACpB;UACA,MAAMC,KAAK,GAAGC,oBAAoB,CAACH,CAAC,CAACI,OAAO,EAAEJ,CAAC,CAACK,OAAO,CAAC;UACxD,MAAMC,GAAG,GAAGZ,SAAS,CAACO,OAAO,CAACM,UAAU,CAAC,IAAI,CAAC;UAC9C,IAAGd,MAAM,EAAEA,MAAM,CAACa,GAAG,EAAEJ,KAAK,EAAEM,YAAY,CAACP,OAAO,CAAC;UACnDO,YAAY,CAACP,OAAO,GAAGC,KAAK;UAC5BO,OAAO,CAACC,GAAG,CAACR,KAAK,CAAC;QACtB;MACJ,CAAC;MACDN,oBAAoB,CAACK,OAAO,GAAGF,iBAAiB;MAChDY,MAAM,CAACC,gBAAgB,CAAC,WAAW,EAAEb,iBAAiB,CAAC;IAC3D;IAEA,SAASc,mBAAmB,GAAG;MAC3B,MAAMC,QAAQ,GAAG,MAAM;QACnBnB,YAAY,CAACM,OAAO,GAAG,KAAK;QAC5BO,YAAY,CAACP,OAAO,GAAG,IAAI;MAC/B,CAAC;MACDJ,kBAAkB,CAACI,OAAO,GAAGa,QAAQ;MACrCH,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEE,QAAQ,CAAC;IAChD;IACA,SAASX,oBAAoB,CAACC,OAAO,EAAEC,OAAO,EAAE;MAC5C,IAAGX,SAAS,CAACO,OAAO,EAAC;QAErB,MAAMc,YAAY,GAAGrB,SAAS,CAACO,OAAO,CAACe,qBAAqB,EAAE;QAC9D,OAAM;UACFC,CAAC,EAAGb,OAAO,GAAGW,YAAY,CAACG,IAAI;UAC/BC,CAAC,EAAGd,OAAO,GAAGU,YAAY,CAACK;QAC/B,CAAC;MACL,CAAC,MAAM;QACH,OAAO,IAAI;MACf;IACA;IACA,SAASC,eAAe,GAAG;MACvB,IAAGzB,oBAAoB,CAACK,OAAO,EAAC;QAC5BU,MAAM,CAACW,mBAAmB,CAAC,WAAW,EAAE1B,oBAAoB,CAACK,OAAO,CAAC;MACzE;MACA,IAAGJ,kBAAkB,CAACI,OAAO,EAAC;QAC1BU,MAAM,CAACW,mBAAmB,CAAC,SAAS,EAAEzB,kBAAkB,CAACI,OAAO,CAAC;MACrE;IACJ;IACAH,qBAAqB,EAAE;IACvBe,mBAAmB,EAAE;IACrB,OAAO,MAAM;MACT;MACAQ,eAAe,EAAE;IACrB,CAAC;EACL,CAAC,EAAC,CAAC5B,MAAM,CAAC,CAAC;EAEX,SAAS8B,YAAY,CAACC,GAAG,EAAE;IACvB9B,SAAS,CAACO,OAAO,GAAGuB,GAAG;EAC3B;EACA,SAASC,WAAW,GAAE;IAClB9B,YAAY,CAACM,OAAO,GAAG,IAAI;EAC/B;EACA,OACIsB,YAAY,EACZE,WAAW;;EAGf;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAAC,GA1JejC,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}